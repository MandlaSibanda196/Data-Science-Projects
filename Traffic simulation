{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.cm as cm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "DISPLAY = True\n",
    "\n",
    "class Car:\n",
    "    '''\n",
    "        Simulates a car in the simulation\n",
    "    '''\n",
    "    \n",
    "    def __init__(self, speed=1, v_max=5, p_slow=0.5, gap_other_back=None):\n",
    "        '''\n",
    "            Initialize initial parameters\n",
    "        '''\n",
    "        self.speed = speed\n",
    "        self.v_max = v_max\n",
    "        self.p_slow = p_slow\n",
    "        self.gap_other_back = gap_other_back\n",
    "        \n",
    "        self.gap_ahead = self.speed + 1\n",
    "        self.gap_other_ahead = self.speed + 1\n",
    "        \n",
    "        if gap_other_back == None:\n",
    "            self.gap_other_back = v_max\n",
    "        \n",
    "    def set_speed(self, speed):\n",
    "        '''\n",
    "            Updates the speed of the car and changes the range for its neighborhood in front\n",
    "        '''\n",
    "        self.speed = speed\n",
    "        self.gap_ahead = self.speed + 1\n",
    "        self.gap_other_ahead = self.speed + 1\n",
    "    \n",
    "    def set_gap_other_back(self, gap):\n",
    "        '''\n",
    "            Updates the number of steps the driver will look back before changing lanes\n",
    "        '''\n",
    "        self.gap_other_back = gap\n",
    "        \n",
    "        \n",
    "        \n",
    "class TrafficSimulation:\n",
    "    '''\n",
    "        Simulates the traffic flow in a high way using periodic boundary\n",
    "    '''\n",
    "    \n",
    "    def __init__(self, road_length=100, traffic_density=0.3, v_max=5, p_slow=0.5, \n",
    "                 num_lanes=2, p_change=1):\n",
    "       \n",
    "            #Initializes variables and attributes for the simulation      \n",
    "       \n",
    "        \n",
    "        self.road_length = road_length\n",
    "        self.traffic_density = traffic_density\n",
    "        self.v_max = v_max\n",
    "        self.p_slow = p_slow\n",
    "        self.num_lanes = num_lanes\n",
    "        self.p_change = p_change\n",
    "    \n",
    "        self.initialize()\n",
    "        \n",
    "    \n",
    "    def initialize(self):\n",
    "        '''\n",
    "            Creates a random distribution of cars for initializing the simulation.\n",
    "            Assumes both lanes have same traffic density.\n",
    "        '''\n",
    "        states = [[-1 for _ in range(self.road_length)] for _ in range(self.num_lanes)]\n",
    "        self.arr_flow = []\n",
    "        \n",
    "        for lane in states:\n",
    "            cars = np.random.choice(self.road_length, replace=False, \n",
    "                        size=int(round(self.road_length * self.traffic_density)))\n",
    "            \n",
    "            for ind_car in cars:\n",
    "                lane[ind_car] = Car(np.random.randint(0, self.v_max + 1), \n",
    "                                    self.v_max, self.p_slow, self.v_max) \n",
    "        \n",
    "        self.current_state = np.array(states)\n",
    "\n",
    "        \n",
    "    \n",
    "    def step(self):\n",
    "        '''\n",
    "            Updates simulation by one time step following all the rules.\n",
    "        '''\n",
    "        \n",
    "        if self.num_lanes > 1:\n",
    "            # If there are more than one lanes, then check for lane changes.\n",
    "            self._update_lanes()\n",
    "        \n",
    "        # Updating the speed independently\n",
    "        self._update_speed()\n",
    "        \n",
    "        \n",
    "        if DISPLAY:\n",
    "            self.display()\n",
    "            \n",
    "        self.calc_flow()\n",
    "    \n",
    "    def _update_lanes(self):\n",
    "        '''\n",
    "            Checks the free side lanes for all the cars, and move them to other lanes if side lanes\n",
    "            are free.\n",
    "        '''\n",
    "        \n",
    "        # Array to store the temporary lane switches\n",
    "        temp_state = [[-1 for _ in range(self.road_length)] for _ in range(self.num_lanes)]\n",
    "        num_lane_changes = 0\n",
    "\n",
    "        for ind_lane in range(self.num_lanes):\n",
    "                arr_ind_cars = np.where(self.current_state[ind_lane] != -1)[0]\n",
    "\n",
    "                for ind_car in arr_ind_cars:\n",
    "                    new_lane = self._get_lane(ind_lane, ind_car)\n",
    "                    \n",
    "                    # Checking if two cars collide in the same place\n",
    "                    # The priority would go to cars in lower lanes or to the left as \n",
    "                    # we loop throught that lane in the beginning\n",
    "                    if temp_state[new_lane][ind_car] == -1:\n",
    "                        temp_state[new_lane][ind_car] = self.current_state[ind_lane, ind_car]\n",
    "                    else:\n",
    "                        temp_state[ind_lane][ind_car] = self.current_state[ind_lane, ind_car]\n",
    "                        \n",
    "                    # counting number of lane changes per step\n",
    "                    if new_lane != ind_lane:\n",
    "                        num_lane_changes += 1\n",
    "        \n",
    "        if DISPLAY:\n",
    "            print('Number of lane changes in this step: ', num_lane_changes)\n",
    "        self.current_state = np.array(temp_state)\n",
    "    \n",
    "    \n",
    "    def _get_lane(self, ind_lane, ind_car):\n",
    "        '''\n",
    "            Gets the preferred lane to move\n",
    "        '''\n",
    "        \n",
    "        lane_options = [] #stores the indexes of side lanes\n",
    "        \n",
    "        # Checking the boundary conditions\n",
    "        if ind_lane > 0:\n",
    "            lane_options.append(ind_lane - 1)\n",
    "        \n",
    "        if ind_lane != self.num_lanes - 1:\n",
    "            lane_options.append(ind_lane + 1)\n",
    "            \n",
    "        free_lanes = [] #stores the free lanes\n",
    "        for ind_other_lane in lane_options:\n",
    "            if self._check_free_lane(ind_lane, ind_car, ind_other_lane):\n",
    "                free_lanes.append(ind_other_lane)\n",
    "        \n",
    "        # If there are two free lanes, it will randomly choose one of the lanes\n",
    "        if len(free_lanes) > 0:\n",
    "            return np.random.choice(free_lanes)\n",
    "        \n",
    "        return ind_lane\n",
    "            \n",
    "        \n",
    "        \n",
    "    def _check_free_lane(self, ind_lane, ind_car, ind_other_lane):\n",
    "        '''\n",
    "            Check for changing lanes\n",
    "        '''\n",
    "        car = self.current_state[ind_lane][ind_car]\n",
    "        \n",
    "        car_ahead = False\n",
    "        # Check gap at front :gap(i) < l\n",
    "        for gap in range(1, car.gap_ahead + 1):\n",
    "            if self.current_state[ind_lane][(ind_car + gap) % self.road_length] != -1:\n",
    "                car_ahead = True\n",
    "        \n",
    "        if not car_ahead:\n",
    "            return False\n",
    "        \n",
    "        # Check in other lane next to the car\n",
    "        if self.current_state[ind_other_lane][ind_car] != -1:\n",
    "            return False\n",
    "        \n",
    "        # Check gap at front in other lane: gap_o(i) < lo\n",
    "        for gap in range(1, car.gap_other_ahead + 1):\n",
    "            if self.current_state[ind_other_lane][(ind_car + gap) % self.road_length] != -1:\n",
    "                return False\n",
    "            \n",
    "        # Check gap at the back in other lane: gap_o_back(i) <lo_back\n",
    "        for gap in range(1, car.gap_other_back + 1):\n",
    "            if self.current_state[ind_other_lane][ind_car - gap] != -1:\n",
    "                return False\n",
    "        \n",
    "        # Check for lane change probability\n",
    "        if np.random.uniform() < self.p_change:\n",
    "            return True\n",
    "        \n",
    "        return False\n",
    "    \n",
    "    \n",
    "    def _update_speed(self):\n",
    "        '''\n",
    "            Follows the independent update rule to update the velocity of the car and move them in each lane\n",
    "            at a time.\n",
    "        '''\n",
    "        next_state = []\n",
    "        \n",
    "        for lane in self.current_state:\n",
    "            arr_ind_cars = np.where(lane != -1)[0]\n",
    "        \n",
    "            for i in arr_ind_cars:\n",
    "                \n",
    "                # Accelerate if speed < v_max\n",
    "                if lane[i].speed < lane[i].v_max:\n",
    "                    lane[i].speed += 1\n",
    "\n",
    "                # Decelerate based on neighborhood\n",
    "                for gap in range(1, lane[i].speed + 1):\n",
    "                    if lane[(i + gap) % self.road_length] != -1:\n",
    "                        gap = gap - 1\n",
    "                        break\n",
    "                lane[i].speed = gap\n",
    "\n",
    "                # Randomized slow downs\n",
    "                if (np.random.uniform() < lane[i].p_slow) and (lane[i].speed > 0):\n",
    "                    lane[i].speed -= 1\n",
    "        \n",
    "            next_step_lane = [-1 for _ in range(self.road_length)]\n",
    "            for i in arr_ind_cars:\n",
    "                next_step_lane[(i + lane[i].speed) % self.road_length] = lane[i]\n",
    "                \n",
    "            next_state.append(next_step_lane)\n",
    "        \n",
    "        self.current_state = np.array(next_state)\n",
    "    \n",
    "    \n",
    "    \n",
    "    def calc_flow(self):\n",
    "        '''\n",
    "            Stores the flow of cars at each time step\n",
    "        '''\n",
    "        counter = 0\n",
    "        for lane in self.current_state:\n",
    "            for i in range(self.v_max):\n",
    "                if lane[i] != -1:\n",
    "                    if lane[i].speed > i:\n",
    "                        counter += 1\n",
    "       \n",
    "        counter = counter / float(self.num_lanes)\n",
    "        \n",
    "        self.arr_flow.append(counter)\n",
    "    \n",
    "    \n",
    "    def calc_avg_flow(self):\n",
    "        '''\n",
    "            Calculate the average flow during the simulation\n",
    "        '''\n",
    "        \n",
    "        if len(self.arr_flow) != 0:\n",
    "            return sum(self.arr_flow) / (len(self.arr_flow))\n",
    "        \n",
    "        return 0\n",
    "    \n",
    "    \n",
    "    def display(self):\n",
    "        '''\n",
    "            Displays next move of the cars.\n",
    "        '''\n",
    "        for lane in self.current_state:\n",
    "            print(''.join(['.' if x == -1 else str(x.speed) for x in lane]))\n",
    "        print('-'*20)        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Code for running simulation and plotting graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_mean_and_CI(x, y, y_upper, y_lower, num_lines, color=None):\n",
    "    '''\n",
    "        Plots the mean for each average flow and upper and lower bounds \n",
    "        \n",
    "        Input:\n",
    "        \n",
    "        * x (array) The values for x axis\n",
    "        \n",
    "        * y (array) The mean values to be plotted in y axis\n",
    "        \n",
    "        * y_upper (array) The upper bounds of y-values for each x-value\n",
    "\n",
    "        * y_lower (array) The lower bounds of y-values for each x-value\n",
    "        \n",
    "        * color (string) The color of the plot\n",
    "    '''\n",
    "    plt.fill_between(x, y_upper, y_lower, color=color, alpha=.2)\n",
    "    \n",
    "    plt.plot(x, y, color=color, label='{0} lane(s)'.format(num_lanes))\n",
    "\n",
    "    \n",
    "\n",
    "def run_experiment(num_simulations, num_steps, simulation, densities, num_lanes):\n",
    "    '''\n",
    "        Runs the simulation multiple times to find the average flow of the simulation\n",
    "        for different time steps:\n",
    "        \n",
    "        Input:\n",
    "        \n",
    "        * num_simulations (int) The number of simulations to be performed for each densities\n",
    "        \n",
    "        * num_steps (int) The number of steps for each simulation\n",
    "        \n",
    "        * simulation (class) The simulation class for running simulation\n",
    "        \n",
    "        * densities (list) The different densities to run traffic simulation on\n",
    "        \n",
    "        * num_lanes (num) The number of lanes in the simulation\n",
    "        \n",
    "        Output:\n",
    "        \n",
    "        results (Tuple) with lists:\n",
    "            x (list) The list of densities used for simulation\n",
    "            y_mean (list) The average time flow for each density\n",
    "            y_upper_bound (list) The 75% percentile of the average flows for each density\n",
    "            y_lower_bound (list) The 25% percentile of the average flows for each density\n",
    "    '''\n",
    "    \n",
    "    x = []\n",
    "    y_mean = [] \n",
    "    y_upper_bound = []\n",
    "    y_lower_bound = []\n",
    "\n",
    "    \n",
    "    for density in densities:\n",
    "        avg_flow = []\n",
    "        for i in range(num_simulations):\n",
    "            sim = simulation(traffic_density=density, num_lanes=num_lanes)\n",
    "            for _ in range(num_steps):\n",
    "                sim.step()\n",
    "            avg_flow.append(sim.calc_avg_flow())\n",
    "        \n",
    "        # Finding mean and confidence interval for average flows\n",
    "        conf_int = np.percentile(avg_flow, [10, 90])\n",
    "        y_mean.append(np.mean(avg_flow))\n",
    "        y_lower_bound.append(conf_int[0])\n",
    "        y_upper_bound.append(conf_int[1])\n",
    "        x.append(density)\n",
    "\n",
    "    return (x, y_mean, y_upper_bound, y_lower_bound, num_lanes)\n",
    "\n",
    "\n",
    "def run_simulation(sim_attributes, num_steps):\n",
    "    '''\n",
    "        Runs a single simulation.\n",
    "        \n",
    "        Input:\n",
    "        \n",
    "        * sim_attribute (dict) All the attributes for the Traffic simulation class\n",
    "        \n",
    "        * num_steps (int) The number of steps for the simulation to run\n",
    "    '''\n",
    "    sim = TrafficSimulation(**sim_attributes)\n",
    "    \n",
    "    print('Running simulation for traffic_density:', sim_attributes['traffic_density'])\n",
    "    print('='*40)\n",
    "\n",
    "    print('Initial State')\n",
    "    sim.display()\n",
    "\n",
    "    print('Simulation Starts')\n",
    "    print('-' * 30)\n",
    "    for _ in range(num_steps):\n",
    "        sim.step()\n",
    "    print('The average flow of traffic (cars per time step) is ', sim.calc_avg_flow())\n",
    "    print('\\n\\n')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Display Single Simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running simulation for traffic_density: 0.1\n",
      "========================================\n",
      "Initial State\n",
      "...2.................2..0.........4............5....4..4.........4.............3........0...........\n",
      "--------------------\n",
      "Simulation Starts\n",
      "------------------------------\n",
      "......3...............1..1.............5..........3...2.....5........4............3.....0...........\n",
      "--------------------\n",
      "..........4.............2..2................5........3...3......4........4...........3..0...........\n",
      "--------------------\n",
      "...............5..........2...3..................5......3...3........5.......4........1.0...........\n",
      "--------------------\n",
      "...................4.........3...3....................5...2....3..........5......4.....10...........\n",
      "--------------------\n",
      ".......................4........3...3...................2....3.....4...........5.....4.00...........\n",
      "--------------------\n",
      "...........................4......2.....4.................2......4.....4...........4.0.00...........\n",
      "--------------------\n",
      "...............................4....2.......4...............2........4.....4.......0.0.00...........\n",
      "--------------------\n",
      "...................................4..2..........5.............3.........4.....4....10.0.1..........\n",
      "--------------------\n",
      ".....................................2...3............5...........3..........4.....40.1.1..2........\n",
      "--------------------\n",
      ".......................................2.....4.............5.........3...........4.00.0..1...2......\n",
      "--------------------\n",
      "The average flow of traffic (cars per time step) is  0.0\n",
      "\n",
      "\n",
      "\n",
      "Running simulation for traffic_density: 0.3\n",
      "========================================\n",
      "Initial State\n",
      ".1....00.....0..2..2..1.3..5...11..3.......115..2.12...3..2........5..0..3.2.....3....5...04....2.5.\n",
      "--------------------\n",
      "Simulation Starts\n",
      "------------------------------\n",
      "...2..0.1....0...1..1..1.1....30..2....4...00..20.0...3.1...2........2.1.0....3.....3....30...3..1.1\n",
      "--------------------\n",
      "1....20...2...1....2..2.1.1...00.....3...2.0.1.0.10....1..2....3......10.0........4.....400.....20..\n",
      "--------------------\n",
      ".1...00.....2...2....20.0..1..00........3.1.1.10.0.1.....2..2.....3...0.10.............500.1....0.1.\n",
      "--------------------\n",
      "2.1..00.......2....3.00..1..1.00........0.0.0.00.0...2.....2...3.....3.10.1............00.1.1....1..\n",
      "--------------------\n",
      "0...200..........3..10.1...20.0.1........1.10.0.1.1.....3....2....3..0.00..1...........0.1.1..2....2\n",
      "--------------------\n",
      ".1..00.1...........20.1..2.0.1.1..2......0.00..10..1.......3....3...20.00...1..........0..1..2...3.0\n",
      "--------------------\n",
      "...200...2.........00..1..10..1.1....3....10.1.00...1.........3....300.0.1....2........0....2..2..10\n",
      "--------------------\n",
      "...00.1.....3......00...1.00...1.1......3.0.10.0.1...1............4000.0...2....2.......1....1...200\n",
      "--------------------\n",
      "...00...2......3...0.1...100...0...2.....10.0.10..1....2..........0000..1.....3...2.......2...1..000\n",
      "--------------------\n",
      "1..00.....2.......30..1..000...0.....2...0.10.0.1..1......3.......000.1...2.....2....3.......3.1.00.\n",
      "--------------------\n",
      "The average flow of traffic (cars per time step) is  0.3\n",
      "\n",
      "\n",
      "\n",
      "Running simulation for traffic_density: 0.7\n",
      "========================================\n",
      "Initial State\n",
      "2..4143..04.11.05313..1004.22.55344.204113312..5.42453402........0.3442..055...03001112342153002.13.\n",
      "--------------------\n",
      "Simulation Starts\n",
      "------------------------------\n",
      ".1.000.1.0.10.10000.1.0000.0.100000.00000000..2.10000000..2......0.000.1.00...30000000000000000.10.1\n",
      "--------------------\n",
      "..1000.0..10.100000..10000.0.00000.100000000..0.0000000.1....3....1000..100...0000000000000000.10.10\n",
      "--------------------\n",
      "1.000.1.1.00.000000..0000.1.100000.00000000.1..1000000.1.1.......40000..00.1..0000000000000000.0.10.\n",
      "--------------------\n",
      ".1000.0..10.1000000..0000.0.00000.100000000...20000000..1..2.....00000..0.1.1.0000000000000000.0.00.\n",
      "--------------------\n",
      ".000.1.1.0.1000000.1.0000.0.00000.00000000.1..0000000.1..1...2...0000.1..10.0.000000000000000.1.100.\n",
      "--------------------\n",
      ".00.1.10.0.000000.1.1000.10.00000.00000000...20000000...2..2....3000.1.1.00..100000000000000.10.00.1\n",
      "--------------------\n",
      ".0.1.10.10.000000..10000.00.00000.0000000.1..00000000.....2..2..000.10.0.0.1.00000000000000.100.00.0\n",
      "--------------------\n",
      "10.0.0.100.000000..00000.0.10000.1000000.1..20000000.1.....1..1.000.00..1.10.00000000000000.000.00..\n",
      "--------------------\n",
      "00..1.100.1000000..0000.1.100000.000000.1..200000000..1.....1..1000.00..0.0.100000000000000.000.0.1.\n",
      "--------------------\n",
      "0.1..1000.0000000..0000.0.00000.1000000...200000000.1...2.....20000.00...10.00000000000000.100.1.10.\n",
      "--------------------\n",
      "The average flow of traffic (cars per time step) is  0.2\n",
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "DISPLAY = True\n",
    "sim_attributes = {\n",
    "    'road_length': 100,\n",
    "    'traffic_density': 0.1,\n",
    "    'v_max': 5,\n",
    "    'p_slow': 0.5,\n",
    "    'num_lanes': 1,\n",
    "    'p_change': 1\n",
    "}\n",
    "num_steps = 10\n",
    "\n",
    "# Running simulation for low traffic density\n",
    "run_simulation(sim_attributes, num_steps)\n",
    "\n",
    "# Running simulation for medium density (density = 0.3)\n",
    "sim_attributes['traffic_density'] = 0.3\n",
    "run_simulation(sim_attributes, num_steps)\n",
    "\n",
    "# Running simulation for high density (density = 0.7)\n",
    "sim_attributes['traffic_density'] = 0.7\n",
    "run_simulation(sim_attributes, num_steps)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting average flow rate graph for different car densities of single lane road."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "DISPLAY = False\n",
    "\n",
    "densities = np.arange(0,0.5,0.01)\n",
    "num_simulations = 100\n",
    "num_steps = 200\n",
    "arr_num_lanes = [1]\n",
    "colors = cm.rainbow(np.linspace(0, 1, len(arr_num_lanes)))\n",
    "\n",
    "for num_lanes in arr_num_lanes:\n",
    "    results = run_experiment(num_simulations, num_steps, TrafficSimulation, densities, num_lanes)\n",
    "    plot_mean_and_CI(*results, colors[num_lanes - 1])\n",
    "\n",
    "plt.legend()\n",
    "plt.xlabel('Density')\n",
    "plt.ylabel('Average Flow rate')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2-lane road simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running simulation for traffic_density: 0.1\n",
      "========================================\n",
      "Initial State\n",
      ".15.............1.................5.........5....4..........3..............1..2....................4\n",
      ".......................2....5....4.................0......2...2...5...2.........4.................1.\n",
      "--------------------\n",
      "Simulation Starts\n",
      "------------------------------\n",
      "Number of lane changes in this step:  2\n",
      "10....4..........1.....................5..............5.........4.....4.....1...2...................\n",
      "..........................3.....4....4...........5..1.......2....3......2...........4..............1\n",
      "--------------------\n",
      "Number of lane changes in this step:  1\n",
      "0.1.......4........2.................5.....4..............4.........4......5..2...2.................\n",
      ".2...........................3...........4.........2.1.........3.....4....2..............5..........\n",
      "--------------------\n",
      "Number of lane changes in this step:  1\n",
      "0...2.........4......2...................4......5....2........4.........4....2..2....3..............\n",
      "....3............................4............5.......1...........3.....3...2................4......\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      ".1....2............5....3.....................5....3....3..........5.......3...2...3....3...........\n",
      ".......3..............................5...........4.....2............3....2....3..................5.\n",
      "--------------------\n",
      "Number of lane changes in this step:  1\n",
      "...2....2...................4.....................4....4...3...........4......3...3....4...3........\n",
      "...5.......4...........4...................5..........4....3.............4...3....3.................\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      ".....2.....3....................4....................3...2....3............4.....3....4...3....4....\n",
      ".......4........5...........5...................5.........4....4............3....4...3..............\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "........3.....3.....................4...................3..2.....3.............4....3...2....3.....4\n",
      "...........4.........5..........4...................4.........4.....5...........4...3....4..........\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "...4.......3.....3.......................5................2..2......3..............4...3..2.....3...\n",
      "...............4.........4...........5...................5.........5.....5.........3....4.....5.....\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      ".......4.......4.....4........................5............1....3.......4............2..1...2......3\n",
      "...................4..........5..........4....................5........4......5.......3......5....4.\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "..3.........5.......5....4........................4..........2......4........5.........2.1....2.....\n",
      "..4....................4..........4...........5...................4.........5......5......4......4..\n",
      "--------------------\n",
      "The average flow of traffic (cars per time step) is  0.3\n",
      "\n",
      "\n",
      "\n",
      "Running simulation for traffic_density: 0.3\n",
      "========================================\n",
      "Initial State\n",
      "23..1.2.3....04.....40..34..4...4..2........5.......1.......2.3...0.04.03.1435........3......3..5...\n",
      "..4.....4.....034.....40....2....1.....3.1..0......0...1....01....3321.40..4.02...13..0......4....4.\n",
      "--------------------\n",
      "Simulation Starts\n",
      "------------------------------\n",
      "Number of lane changes in this step:  0\n",
      "0..2.10.....40....4.00..0..2...3..2...3..........5...1......0...2..100.00.000.....5.......4....2..2.\n",
      ".3.....5....4.00.....50.1.....2...1.....1..2.1.....0....1...0..2..000.100..0.0..2.0.1..1.........4..\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      ".1..10.1....00.....100..0.....3.1...2.....4........2..1.....0.....200.10.100.1........4.......4..20.\n",
      "....3.....3..10.1....00...2.....2...2.....2.1..2...0......2..1..1.00.100.1.0..1..10...2..2.........2\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "..1.0.1..2..0.1....00.1..1....0..1....2.......4.....1...2....1....000.00.00.1.1............5...1.0.1\n",
      "..3.....4..1.0.1..2..0.1....2......3..2....1..2..2.0........2.1..100.000..1.1..1.00....1....3.......\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      ".20.0..1...20...2..0.1..2..2..0...1......3.........5.1.....3..1...00.100.0.10...2............2.0.0..\n",
      "......4..1.0..1.1..1.0...2....2......2...3...2..20.0.........1.1.00.1000...1..20.0.1....1.......4...\n",
      "--------------------\n",
      "Number of lane changes in this step:  2\n",
      "...20....2.0.1...1.0..1...2.1.0....1.........4....2.1..2.....2..2.0.100.10.00.....2..........0..1.1.\n",
      ".5.1...1.0.0..0...20.0.....2....2.......3...3...3.10.........0.0.00.0000.....20.1.1.1.....2.........\n",
      "--------------------\n",
      "Number of lane changes in this step:  1\n",
      "2..00.....1.1..2..1.1..1..0.0.0.....1............4.1.1...2....1..10.00.10.100.......2.........1.....\n",
      "..1.1...10.0...1..0.10.......2....2.......2....3.100..........1.100.000.1....00..10..1.......3....2.\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "..20.1.....1.1..1.0..1...20..10......1............1.1..2...2....20.10.10.1000.........2........1....\n",
      ".3.1..2.00.0....1..100..........3...2.......2...1000..........0.000.000...2..0.1.00...1..........4..\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "..0.1..2...0..1.0..1..1..0.1.00.......1...........0...2...3..2..0.100.0.10000............3.......2..\n",
      "30..1..100.0.....1.000.............3...3.......3000.1..........1000.000....1.0.0.0.1....2...........\n",
      "--------------------\n",
      "Number of lane changes in this step:  2\n",
      "..0...2...3.1.0..1..1...2.1..20.........2.........0......3....1..1000.0.00000...............3......2\n",
      "0.1...200.1.1....0.000........1......2.....4...0000..1.......3.0000.00.1...0..10.0...2.....3........\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "1..1....2.0..10....2..2..1..20.1...........3......0.........3...20000..100000..................3....\n",
      ".1.1..00.10...2..0.00.1........1........3....2.000.1..1......0.000.10.1.1..0..00.0......3.....3.....\n",
      "--------------------\n",
      "The average flow of traffic (cars per time step) is  0.4\n",
      "\n",
      "\n",
      "\n",
      "Running simulation for traffic_density: 0.7\n",
      "========================================\n",
      "Initial State\n",
      "4122.411345.5.1243.4.14133...40130433.54..525.0.50.201.1.01101520.05.534.52..3..51..5.4.5534..55.105\n",
      "11...5.2...1.3341023...3.41522.0.54.2.023404110230.133511113215..33511003.443....5.5034.54.0.433.5.3\n",
      "--------------------\n",
      "Simulation Starts\n",
      "------------------------------\n",
      "Number of lane changes in this step:  0\n",
      "000.1000000..1000.1.10000..2.0000000.10..200.1.100.000.0.00000000.0.100.10..2..20..20..1000.1.0.1000\n",
      "0.1...1..2..1000000..2.0.0000.10.0.1.100000000000.100000000000.1.0000000.100....4.10000.00..1000.0.0\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "000.000000.1.0000.0.00000..0.000000.100..000.0.00.100.1.10000000.10.00.10.1...20.1.00..0000..1.10000\n",
      "0..1...1...2000000.1.0..1000.10.1.10.00000000000.1000000000000.0.000000.100.1....100000.0.1.000.1.10\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "00.1000000..10000..100000...1000000.00.1.000..100.00.1.100000000.00.00.00..1..00.0.00..000.1..100000\n",
      ".1...2...2.000000.10.0..000.100..10.100000000000.000000000000.1.100000.100.1..2..00000.1.10.00.1.100\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "0.10000000..00000..00000.1..000000.10.10.00.1.00.100..1000000000.0.100.0.1...20.1.100..000...2000000\n",
      "1.1....2..1000000.00..1.00.1000..0.1000000000000.00000000000.10.00000.100.1.1..1.0000.1.100.0.1.100.\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "0.00000000..00000..00000..1.00000.10.100.0.1.100.000..0000000000.0.00.1.1.1..0.10.000..00.1..0000000\n",
      "0...2....2000000.10.1.0.00.000.1.0.0000000000000.00000000000.0.100000.000.0...2.10000.0.00.10.0.000.\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      ".100000000..0000.1.00000...10000.100.00.10..1000.000..0000000000..100.0.0..1.0.0.1000..00...20000000\n",
      "0.....2..000000.10.1.1.100.000.0..1000000000000.100000000000.0.000000.00.10...0.0000.10.00.00.0.00.1\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      ".000000000..000.10.0000.1..0000.100.10.100..0000.00.1.000000000.1.00.1.10..0..10.000.1.0.1..00000000\n",
      "0......1.00000.10.1.10.000.00.10..0000000000000.00000000000.1.100000.100.0.1..0.0000.0.100.00.0.0.10\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "100000000.1.00.100.000.1..2000.1000.0.100.1.0000.00.0.00000000.1.100..10.1..1.00.00.10..1..20000000.\n",
      ".1.....0.00000.00..100.000.0.10.1.000000000000.100000000000.0.00000.1000.0...20.000.1.1000.00.0..100\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "00000000.10.0.1000.00.1..2000.1000.1.1000.0.0000.00..100000000..1000..0.1..2.100.0.10.1..1.00000000.\n",
      "1.1.....10000.100..000.00.1.100.0.00000000000.100000000000.10.00000.000.1.1..0.1000.0.0000.00.0..00.\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "00000000.00..10000.0.1.1.0000.000.1.10000..1000.10.1.000000000..0000..0...2.100.1.10.1.1.0.0000000.1\n",
      "0...2...0000.100.1.000.0.1.100.10.0000000000.1000000000000.0.100000.00.10...20.000.1.1000.100.0..0.1\n",
      "--------------------\n",
      "The average flow of traffic (cars per time step) is  0.15\n",
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "DISPLAY = True\n",
    "sim_attributes = {\n",
    "    'road_length': 100,\n",
    "    'traffic_density': 0.1,\n",
    "    'v_max': 5,\n",
    "    'p_slow': 0.5,\n",
    "    'num_lanes': 2,\n",
    "    'p_change': 1\n",
    "}\n",
    "num_steps = 10\n",
    "\n",
    "# Running simulation for low traffic density\n",
    "run_simulation(sim_attributes, num_steps)\n",
    "\n",
    "# Running simulation for medium density (density = 0.3)\n",
    "sim_attributes['traffic_density'] = 0.3\n",
    "run_simulation(sim_attributes, num_steps)\n",
    "\n",
    "# Running simulation for high density (density = 0.7)\n",
    "sim_attributes['traffic_density'] = 0.7\n",
    "run_simulation(sim_attributes, num_steps)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting average flow rate graph for different car densities of 1-lane vs 2-lane road."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "DISPLAY = False\n",
    "\n",
    "densities = np.arange(0,0.5,0.01)\n",
    "num_simulations = 100\n",
    "num_steps = 200\n",
    "arr_num_lanes = [1, 2]\n",
    "colors = cm.rainbow(np.linspace(0, 1, len(arr_num_lanes)))\n",
    "\n",
    "for num_lanes in arr_num_lanes:\n",
    "    results = run_experiment(num_simulations, num_steps, TrafficSimulation, densities, num_lanes)\n",
    "    plot_mean_and_CI(*results, colors[num_lanes - 1])\n",
    "\n",
    "plt.legend()\n",
    "plt.xlabel('Density')\n",
    "plt.ylabel('Average Flow rate')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3-lanes road simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running simulation for traffic_density: 0.1\n",
      "========================================\n",
      "Initial State\n",
      "...................5....30....21...........................4..................5..............12..1..\n",
      ".......5........0...............................3......1.....5......41..................2........14.\n",
      ".......................2.................2.2.0...1..0..............5..1....1....................3...\n",
      "--------------------\n",
      "Simulation Starts\n",
      "------------------------------\n",
      "Number of lane changes in this step:  5\n",
      "........................50......1..............................4........4..........5.........0..2..2\n",
      "...5.......4.....1.........3....2........0...2......4...1.........5...1....................3.....0..\n",
      "4.........................3..................0....1.0................2.1.....2......................\n",
      "--------------------\n",
      "Number of lane changes in this step:  2\n",
      ".2......................00........2......................5.........4........4...........5....0...1..\n",
      ".......4...........2...........4..2......0......3........1...........3.1......................3..0..\n",
      "....4...........5............3................1...0.0................0...2.....2....................\n",
      "--------------------\n",
      "Number of lane changes in this step:  1\n",
      "....3...................0.1..........3.......................4..........5........5..........40.....2\n",
      "...........4.........2...........2...3...0.........3.......2.........0...2.......................0..\n",
      ".........5...........5...........4..............2.0.0.................1.....3....2...............3..\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      ".2.....3................0...2............4.......................4...........5.......4......0.1.....\n",
      "................5......2...........2....30.............4......3.......1....2......................1.\n",
      "3.............5..........4............5.........0.0.0..................1.......3....3...............\n",
      "--------------------\n",
      "Number of lane changes in this step:  1\n",
      "....3.....3..............1.....3.............4........................5...........5.......5..1..2...\n",
      "....................4.....3..........2..00........0.........5.....4.....2....2.....................1\n",
      "...3..............4...........5............5....0....1..................1..........4....4...........\n",
      "--------------------\n",
      "Number of lane changes in this step:  3\n",
      "........4....3.............2......3...1..1........5........................5...........5.......2..2.\n",
      ".2.......................5....4...........1.......0..............5.....5...3...2...............5....\n",
      "......3................5..........4............40.....1..................1............3.....4.......\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      ".3.........3.....4...........2......2...2..2...........5.......................4............5....2..\n",
      "....3.......................3.....4.........2.....0..................4....3..2...2.................4\n",
      ".........3.................4..........4........00......1...................2.............3.......5..\n",
      "--------------------\n",
      "Number of lane changes in this step:  1\n",
      ".....4........3.......5........2.......3..2..2.............4.......................4...............2\n",
      "...4...3........................4......5.......3..0......................4.1....3...3............5..\n",
      "..5.........3..................4..........4....00........2....................3..............4......\n",
      "--------------------\n",
      "Number of lane changes in this step:  1\n",
      ".2.......4........4........5.....2.......2.1...2...............4........................5...........\n",
      ".4....3...3.........................4.......5....20.........................1.....2....3............\n",
      "......4.........4...................5.........40.1..........3...............3....3................5.\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "....3.........5........5.......4....3.....1..2...2..................5.......................4.......\n",
      "....3...2.....4.........................4.......40.1..........................2.....2.....3.........\n",
      "..4........5.........5..................4.....0.1..2...........3...............3.....4..............\n",
      "--------------------\n",
      "The average flow of traffic (cars per time step) is  0.39999999999999997\n",
      "\n",
      "\n",
      "\n",
      "Running simulation for traffic_density: 0.3\n",
      "========================================\n",
      "Initial State\n",
      "2.......3...22....3...2.3.3..32.3.45..0..2...3...300...50..3...........1....2.....52.11.......1....2\n",
      "............2....5........1..440...232.014.31..55.1.4.3...2......3....0..0...5.0..453....2......3...\n",
      "0.35.00......103..2.5....3..5...........1...4..........2.....02....5...5...541..3..2......3.1..13.24\n",
      "--------------------\n",
      "Simulation Starts\n",
      "------------------------------\n",
      "Number of lane changes in this step:  5\n",
      "..2.......2.0..2....2.0..1..200.0.0..2.1...2....300.1..00.....3..........2....2...00.0..2......1...0\n",
      "..0.1.1.......2......4......200.1...00.000.0.1.0..2..1...3...3......3..1.0...0..1.00...3....3......3\n",
      ".1.....1.....00..20.....4..2.....5....3...2......5..2....2...0...3....3...300.1...2...3....1.1.0.100\n",
      "--------------------\n",
      "Number of lane changes in this step:  1\n",
      "1...2......10....2..0..1..1.00.10..1..1.1....2..000...20.1........4.....4...3....300.0....2.....1...\n",
      "1.0.0..1.........3.......4..00.1..2.0.100.1.1.1.1...2.1.....3...3......0..1...1.0.0.1.....3....3....\n",
      "1.1.....1....0.1.0.1.....1....3......4..2...2......2..2....2..1.....3...2.00.1.1....2.....4.1.1.100.\n",
      "--------------------\n",
      "Number of lane changes in this step:  1\n",
      "..2...2....00......2.1...2.10.100....2.1.1....1.00.1..0.1..2...........5..2....3.000.0.......3...1..\n",
      ".10.0....2...0.......4.....20.1..2.1.1000.0.0.0...2..1.1......2.....4..0....2..1.1.1.1.......3....3.\n",
      "0...2....1.....0..1.1......2.....3.....2..2....3.....2...3..1...2.....2..10.1.1.1.....2...0..10.000.\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "....2....3.0.1.....0..1..0.00.00.1....1.1..2...10.1..20...2..2...........2..2..0.00.1.1........2...2\n",
      "200..1......30...........4.0.1..20..1000.10.0.0....1..1.1.......2.....20.....1.0.0.0...2........3...\n",
      "0.....2...1.....1..1..2.......3.....3...1....3.....4....3..2..2...2....1.00..10...2......3.1.0.1000.\n",
      "--------------------\n",
      "Number of lane changes in this step:  2\n",
      ".2....2..0.0..1.........20.0.10.1..2..0..1...2.00..1.00....1...2..........1...2.100.0..1..........3.\n",
      "000....2....0.1....0......10...200..000.10.10..1.....2.1.1........2...00......1.1.1.1.....3.......2.\n",
      "0........3..2....1..1...2........3....2..1......3......4.1..1...2...2..0.0.1.00.....2.....10..1000.1\n",
      "--------------------\n",
      "Number of lane changes in this step:  1\n",
      "2...3...2.1.1..1........00..10.1.1..1.0...1..0.0.1..10.1.....2...2.....1...1..0.000.0...1...........\n",
      "00.1......3.0..1...0......00...000..00.100.0.1..1....0..1.1..........3..1.....0.0.0..1........4....1\n",
      ".1.........2...3...2..2....3........3..1..1........3....1.1...2....3.1.0..1.100........3..0.1.0000.0\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "..2....30..1.1..1.......0.1.0.1.1.1.0..1....20.0..1.0.1..2.....2...2.....2...20.00.1.1....2.........\n",
      "0.1.1......10....2.0......00...000..0.100.1.1.1..1....1.0...2..........2.1....0..1.1..1...........40\n",
      "..1...........3...3.1....3....3......1..1...2.........3..1.1....2..0..1.1..1000.........1..1.10000.0\n",
      "--------------------\n",
      "Number of lane changes in this step:  3\n",
      "....2..00...1.1..1......0..1.10.0..1.1..1...00..1..1.1..2..2......3..2.....2.0.100..1.1......3......\n",
      "0.0...2....00.....10......0.1..000..0.00.1.10...2.1...0..1....2.....1...1.1...0...1..2.1......1.1.00\n",
      "1..1.............3.1..2......4....4...1..1.....3........2.1..2.....3..0...2000.1..........2.1..10.1.\n",
      "--------------------\n",
      "Number of lane changes in this step:  2\n",
      ".1...1.00....1.1..1.....0..0.0.10..0...2.1..0.1..1..1.1..1...2......2...3...1.1000...1..2........4.0\n",
      "..0.....2..00.....00......0..1.000..0.0.1.100...0...2..1...2.....3...1...1..2..1...1.0..1......10.0.\n",
      "..2.1.............1..2..2.......3....3.1...2......3.....0..1...2....1..1..0000...2........0..1.0.1.1\n",
      "--------------------\n",
      "Number of lane changes in this step:  1\n",
      "1.1..0.0.1....1.1..1.....1.0.0.0.1.0...0...20...2.1..1..2.1.....3.....2....3.1000.1...1....3.....0..\n",
      "..0........3.1....0.1......1..100.1.0.0..100.1..0....1..1.....3.....3.1...1...2..2.0.0....2....0.10.\n",
      ".20..1......1.......2.1....3........4.1.1.....3......3..0...1....2...1...2000.1....2......0...1.10..\n",
      "--------------------\n",
      "The average flow of traffic (cars per time step) is  0.29999999999999993\n",
      "\n",
      "\n",
      "\n",
      "Running simulation for traffic_density: 0.7\n",
      "========================================\n",
      "Initial State\n",
      "2155.3005...11..3341.22..45...330.5313411.2.3.44301..541.413434..044.5021.254.50.20.23115234.5.0..42\n",
      ".4.2...303.14..00.3.301.111.44.112.511533.5.3420...25.15.3..1..322253.24.5350.04100510042113.134204.\n",
      "..35.31..2535..41.51125.0.1245.330.2.23211123040..2.523303.5.513414.024.2..4034100400041....4....324\n",
      "--------------------\n",
      "Simulation Starts\n",
      "------------------------------\n",
      "Number of lane changes in this step:  0\n",
      "000.1000..2.0.1.000.10.1.0..2.00.10000000..1.10000..200.100000..200.1000.100.10.100.00000000..1.1.00\n",
      "20....300.10..20.10.000.000.00.000.00000.1.1000.1..0.10.1..2.1.00000.100.000.10000000000000.100000..\n",
      "1.00.0.1.000.1.0.100000.0.000.100.10.0000000000.1..1000000.0.00000.100.1.1.000000000000..2......400.\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "00.1000.1.0..1.1000.0.1.1.1..10.10000000.1.0.00000..000.000000..00.1000.100.10.100.10000000.1.0..100\n",
      "00....000.00..0.10.1000.00.10.1000.0000.10.000.1..2.10.1..20.0.00000.00.100.100000000000000.000000..\n",
      "0.00.0.0.00.1.10.000000.0.000.000.0.10000000000..1.000000.1.100000.000..10.000000000000.....3...00.1\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "0.1000.1.1.1..10000.0.0..1..200.0000000.1.10.0000.1.00.100000.1.0.1000.1000.0.100.100000000.0.0..000\n",
      "00....00.100..0.00.000.100.0.1000.1000.10.1000...2.100..1.0.10.00000.00.00.1000000000000000.00000.1.\n",
      "0.0.10.0.0.10.00.000000.0.00.1000..100000000000..0.00000.1.1000000.000..0.1000000000000........30.10\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      ".1000.1.10...200000.0..1..1.00.10000000..10.1000.1.10.100000.1.10.000.1000.10.00.100000000.10..1.000\n",
      "0.1...0.100.1..10.1000.000.0.0000.0000.0.10000...0.000...10.0.100000.00.00.0000000000000000.0000.10.\n",
      ".10.00..10.0.10.1000000.0.0.1000.1.000000000000..0.0000.1.10000000.00.1..10000000000000........0.100\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "1000.1.10.1..00000.10....20.0.10000000.1.00.0000..10.100000.1.10.1000.0000.0.10.1000000000.00...100.\n",
      ".1..2.0.00.1.1.00.0000.00.10.000.10000..100000...0.000...00..100000.100.00.000000000000000.10000.00.\n",
      ".0.10.1.0.10.00.0000000..1.1000.1.1000000000000..0.0000.0.00000000.00...200000000000000.........1000\n",
      "--------------------\n",
      "Number of lane changes in this step:  1\n",
      "0000..10.1..20000.10.1...0.1.100000000.0.0.1000.1.00.000000..10.1000.1000.10.00.0000000000.00...00.1\n",
      "...2.10.0.1.1.10.1000.10.10.100.10000.1.000000....100.1..0.1.00000.1000.0.1000000000000000.0.100.0.1\n",
      "1.100..10.0.10.1000000.1..10000.0.000000000000.1.0.0000..10000000.10.1..000000000000000......0..000.\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "000.1.0.1..20000.10.1.1...10.000000000..1.10000.0.00.00000.1.00.0000.000.100.0.1000000000.100...00.0\n",
      ".2..10.1.1.1.100.0000.00.00.00.100000..1000000....000..1..10.00000.0000..1000000000000000.1.1000.0..\n",
      ".100.1.0.1.100.000000.1.1.00000..100000000000.10..10000..00000000.0.1..2000000000000000.......1.000.\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "000..10...20000.10.1.1.1..0.1000000000...100000.0.0.10000.1.10.10000.000.00.1.10000000000.000...00.0\n",
      "...200.0.0.0.00.10000.0.10.100.00000.1.000000.1...00.1...200.00000.0000..0000000000000000..1000.10..\n",
      ".00.1.10.0.00.1000000..10.0000.1.00000000000.10.1.00000..00000000..1..20000000000000000........1000.\n",
      "--------------------\n",
      "Number of lane changes in this step:  1\n",
      "000..0.1..0000.10.10.0..1..10000000000...00000.10.0.00000.0.00.0000.100.100..10000000000.1000...0.10\n",
      "...00.10..1.100.00000..100.00.100000.0.00000.1.1..00..1..00.100000.0000..000000000000000.1.0.00.00..\n",
      ".00..100.0.00.0000000..0.1000.1.100000000000.00..10000.1.00000000....200000000000000000.....0..000.1\n",
      "--------------------\n",
      "Number of lane changes in this step:  0\n",
      "00.1.0...2000.10.10.1.1...200000000000...00000.00..100000.0.00.0000.00.1000..00000000000.000.1..0.00\n",
      "...00.00..0.00.10000.1.000.00.00000.10.0000.1.1.1.0.1...200.00000.10000..000000000000000.0..10.10.1.\n",
      ".0.1.000..10.1000000.1.0.0000.0.00000000000.100..00000..100000000....00000000000000000.1.....1.000.0\n",
      "--------------------\n",
      "The average flow of traffic (cars per time step) is  0.16666666666666666\n",
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "DISPLAY = True\n",
    "sim_attributes = {\n",
    "    'road_length': 100,\n",
    "    'traffic_density': 0.1,\n",
    "    'v_max': 5,\n",
    "    'p_slow': 0.5,\n",
    "    'num_lanes': 3,\n",
    "    'p_change': 1\n",
    "}\n",
    "num_steps = 10\n",
    "\n",
    "# Running simulation for low traffic density\n",
    "run_simulation(sim_attributes, num_steps)\n",
    "\n",
    "# Running simulation for medium density (density = 0.3)\n",
    "sim_attributes['traffic_density'] = 0.3\n",
    "run_simulation(sim_attributes, num_steps)\n",
    "\n",
    "# Running simulation for high density (density = 0.7)\n",
    "sim_attributes['traffic_density'] = 0.7\n",
    "run_simulation(sim_attributes, num_steps)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting average flow rate graph for different car densities of 1-lane vs 2-lane vs 3-lane roads"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "DISPLAY = False\n",
    "\n",
    "densities = np.arange(0,0.5,0.01)\n",
    "num_simulations = 100\n",
    "num_steps = 200\n",
    "arr_num_lanes = [1, 2, 3]\n",
    "colors = cm.rainbow(np.linspace(0, 1, len(arr_num_lanes)))\n",
    "\n",
    "for num_lanes in arr_num_lanes:\n",
    "    results = run_experiment(num_simulations, num_steps, TrafficSimulation, densities, num_lanes)\n",
    "    plot_mean_and_CI(*results, colors[num_lanes - 1])\n",
    "\n",
    "plt.legend()\n",
    "plt.xlabel('Density')\n",
    "plt.ylabel('Average Flow rate')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
